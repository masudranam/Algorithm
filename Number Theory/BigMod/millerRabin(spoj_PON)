#include<bits/stdc++.h>
using namespace std;

#define print(a) for(auto x:a)cout<<x<<' ';cout<<'\n';
#define debug(x) cout<<#x<<" "<<x<<endl
#define all(a) (a).begin(),(a).end()
#define sz(a) (int)(a.size())
#define int   long long int
#define ll __uint128_t
#define endl '\n'
#define ar array

const int M = 1e14 + 7;
const int N = 5e7 + 10;

int mul (int a, int b, int M) {
   int res = 0; a %= M, b %= M;
   while (b) {
      if (b & 1) {
         res = (res + a) % M;
      }
      a = (a + a) % M;
      b >>= 1;
   }
   return res % M;
}

int pw (int a, int b, int mod) {
   int res = 1;
   while (b) {
      if (b & 1) res = mul (res, a, mod);
      a = mul (a, a, mod);
      b >>= 1;
   }
   return res % mod;
}

bool isComposite (int n, int a, int d, int s) {
   int x = pw (a, d, n);
   if (x == 1 || x == n - 1) return false;
   for (int r = 1; r < s; r++) {
      x = mul (x, x, n);
      if (x == n - 1) return false;
   }
   return true;
}

bool millerRabin (int n) {
   if (n < 4) return n == 2 || n == 3;
   int s = 0, d = n - 1;
   while (d % 2 == 0) s++, d /= 2;
   for (int a : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37}) {
      if (n == a) return true;
      if (isComposite (n, a, d, s)) return false;
   }
   return true;
}


void solve() {
   int n; cin >> n;
   if (millerRabin (n)) puts ("YES");
   else puts ("NO");
}

signed main() {
   ios_base::sync_with_stdio (0);
   cin.tie (0);

   int t = 1;  cin >> t;
   for (int tc = 1; tc <= t; tc++) {
      //cout << "Case " << tc << ": \n";
      solve();
   }
   return 0;
}
