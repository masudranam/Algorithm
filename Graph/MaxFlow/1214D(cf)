#include<bits/stdc++.h>
using namespace std;
typedef int LL;

int n, m;
const int N = 1e6+7;
string a[N];

struct Edge {
    int u, v;
    LL cap, flow;
    Edge() {}
    Edge(int u, int v, LL cap): u(u), v(v), cap(cap), flow(0) {}
};

struct Dinic {
    int N;
    vector<Edge> edges;
    vector<vector<int>> adj;
    vector<int> d, pt;

    Dinic(int N): N(N), edges(0), adj(N), d(N), pt(N) {}

    void AddEdge(int u, int v, LL cap) {
        if (u != v) {
            edges.emplace_back(u, v, cap);
            adj[u].emplace_back(edges.size() - 1);
            edges.emplace_back(v, u, 0);
            adj[v].emplace_back(edges.size() - 1);
        }
    }

    bool BFS(int S, int T) {
        queue<int> q({S});
        fill(d.begin(), d.end(), N + 1);
        d[S] = 0;
        while(!q.empty()) {
            int u = q.front(); q.pop();
            if (u == T) break;
            for (int k: adj[u]) {
                Edge &e = edges[k];
                if (e.flow < e.cap && d[e.v] > d[e.u] + 1) {
                    d[e.v] = d[e.u] + 1;
                    q.emplace(e.v);
                }
            }
        }
        return d[T] != N + 1;
    }

    LL DFS(int u, int T, LL flow = -1) {
        if (u == T || flow == 0) return flow;
        for (int &i = pt[u]; i < adj[u].size(); ++i) {
            Edge &e = edges[adj[u][i]];
            Edge &oe = edges[adj[u][i]^1];
            if (d[e.v] == d[e.u] + 1) {
                LL amt = e.cap - e.flow;
                if (flow != -1 && amt > flow) amt = flow;
                if (LL pushed = DFS(e.v, T, amt)) {
                    e.flow += pushed;
                    oe.flow -= pushed;
                    return pushed;
                }
            }
        }
        return 0;
    }

    LL MaxFlow(int S, int T) {
        LL total = 0;
        while (BFS(S, T)) {
            fill(pt.begin(), pt.end(), 0);
            while (LL flow = DFS(S, T))
                total += flow;
        }
        return total;
    }
};

bool isvalid(int i, int j) {
    return i<n && j<m && a[i][j] == '.';
}


int getStart(int x, int y) { return 2*(x*m+y); }
int getEnd(int x, int y) { return getStart(x, y)+1; }

int main() {
    cin>>n>>m;

    for (int i=0; i<n; i++) {
        cin>>a[i];
    }

    Dinic solver(2*m*n+1);

    for (int i=0; i<n; i++)
        for (int j=0; j<m; j++) {
            if (isvalid(i, j) && isvalid(i+1, j))   solver.AddEdge(getEnd(i, j), getStart(i+1, j), 1);
            if (isvalid(i, j) && isvalid(i, j+1))   solver.AddEdge(getEnd(i, j), getStart(i, j+1), 1);
            if (isvalid(i, j))                      solver.AddEdge(getStart(i, j), getEnd(i, j), 1);
        }

    int source = getEnd(0, 0);
    int sink = getStart(n-1, m-1);
    int ans = solver.MaxFlow(source, sink);
    cout<<ans<<endl;

}
